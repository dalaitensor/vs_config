{

	"for loop": {
		"prefix": "forloop",
		"body": [
			"for (int i = 0; i < n; i++) {",
     	 	"    ",
      		"}"
		],
		"description": "for loop"
	},

	"segment tree": {
		"prefix": "segment",
		"body": [
			"class St{",
			"private:",
			"    vector<int> st;",
			"",
			"public:",
			"    St(int n){",
			"        st.resize(4 * n, 0);",
			"    }",
			"",
			"    void print() {",
			"        for (int val : st) {",
			"            cout << val << \" \";",
			"        }",
			"        cout << endl;",
			"    }",
			"",
			"    void merge(int pos, int val){",
			"        st[pos] = val;",
			"    }",
			"",
			"    int op(int a, int b){",
			"        return a + b;",
			"    }",
			"",
			"    void build(vector<int> &arr, int lx, int rx, int pos){",
			"        if(lx == rx){",
			"            merge(pos, arr[lx]);",
			"            return;",
			"        }",
			"",
			"        int mid = lx + (rx - lx) / 2;",
			"",
			"        build(arr, lx, mid, 2 * pos + 1);",
			"        build(arr, mid + 1, rx, 2 * pos + 2);",
			"",
			"        st[pos] = op(st[2 * pos + 1], st[2 * pos + 2]);",
			"    }",
			"",
			"    void update(int index, int val, int lx, int rx, int pos){",
			"        if(lx == rx){",
			"            merge(pos, val);",
			"            return;",
			"        }",
			"",
			"        int mid = lx + (rx - lx) / 2;",
			"",
			"        if(mid >= index) update(index, val, lx, mid, 2 * pos + 1);",
			"        else update(index, val, mid + 1, rx, 2 * pos + 2);",
			"",
			"        st[pos] = op(st[2 * pos + 1], st[2 * pos + 2]);",
			"    }",
			"",
			"    int query(int l, int r, int lx, int rx, int pos){",
			"        if(l <= lx && rx <= r){",
			"            return st[pos];",
			"        }",
			"        if(rx < l || r < lx) return 0;",
			"",
			"",
			"",
			"        int mid = lx + (rx - lx) / 2;",
			"",
			"        int left = query(l, r, lx, mid, 2 * pos + 1);",
			"        int right = query(l, r, mid + 1, rx, 2 * pos + 2);",
			"",
			"        return op(left, right);",
			"    }",
			"",
			"};"

		]
	},

	"main function": {
		"prefix": "base",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"#define int              long long",
			"#define FOR(i, a, b) for(int i = a; i < b; i++)",
			"#define ROF(i , n, a) for(int i = n; i >= a; i--)",
			"#define all(x) begin(x), end(x)",
			"",
			"const int MOD = 1e9 + 7;",
			"const int N = 1e6 + 7;",
			"template<typename T, typename U>",
			"ostream& operator<<(ostream &os, pair<T, U> p)",
			"{",
			"return os << \"(\" << p.first << \",\" << p.second << \")\";",
			"}",
			"template<typename T>",
			"void print(T arr, int limit = 1e8){",
			"   for(int i : arr) if(limit-- > 0) cout << i << \" \";",
			"   cout << endl;",
			"}",
			"",
			"void solve(){",
			"    ",
			"}",
			"",
			"",
			"signed main() {",
			"",
			"    ios::sync_with_stdio(0);",
			"    cin.tie(0), cout.tie(0);",
			"    int t = 1;",
			"    cin >> t;",
			"    for(int i = 1; i <= t; i++){",
			"        solve();",
			"    }",
			"",
			"}"
		],
		"description": "Base struct of main function"
	},

	"fibonacci": {
		"prefix": "fibonnaci",
		"body": [
			"struct matrix {",
			"    long long mat[2][2];",
			"    matrix friend operator *(const matrix &a, const matrix &b){",
			"        matrix c;",
			"        for (int i = 0; i < 2; i++) {",
			"          for (int j = 0; j < 2; j++) {",
			"              c.mat[i][j] = 0;",
			"              for (int k = 0; k < 2; k++) {",
			"                  c.mat[i][j] += a.mat[i][k] * b.mat[k][j];",
			"              }",
			"          }",
			"        }",
			"        return c;",
			"    }",
			"};",
			"",
			"matrix matpow(matrix base, long long n) {",
			"    matrix ans{ {",
			"      {1, 0},",
			"      {0, 1}",
			"    } };",
			"    while (n) {",
			"        if(n&1)",
			"            ans = ans*base;",
			"        base = base*base;",
			"        n >>= 1;",
			"    }",
			"    return ans;",
			"}",
			"",
			"long long fib(int n) {",
			"    matrix base{ {",
			"      {1, 1},",
			"      {1, 0}",
			"    } };",
			"    return matpow(base, n).mat[0][1];",
			"}"
		]
	},




	"prime": {
		"prefix": "prime",
		"body": [
			"int n;",
			"vector<bool> is_prime(n+1, true);",
			"is_prime[0] = is_prime[1] = false;",
			"for (int i = 2; i <= n; i++) {",
			"    if (is_prime[i] && (long long)i * i <= n) {",
			"        for (int j = i * i; j <= n; j += i)",
			"            is_prime[j] = false;",
			"    }",
			"}"

		]
	},


	"euler": {
		"prefix": "euler",
		"body": [
			"int phi(int n) {",
			"    int result = n;", 
			"    for (int i = 2; i * i <= n; i++) {", 
			"        if (n % i == 0) {", 
			"            while (n % i == 0)", 
			"                n /= i;", 
			"            result -= result / i;", 
			"        }", 
			"    }", 
			"    if (n > 1)", 
			"        result -= result / n;", 
			"    return result;", 
			"}",
		],
	},



	"binexp": {
		"prefix": "binexp",
		"body": [
			"long long binpow(long long a, long long b, long long m) {",  
			"a %= m;",  
			"long long res = 1;",  
			"while (b > 0) {",  
			"    if (b & 1)",  
			"        res = res * a % m;",  
			"    a = a * a % m;",  
			"    b >>= 1;",  
			"}",  
			"return res;",  
			"}"

		]
	},

	"gcd": {
		"prefix": "gcd",
		"body": [
			"int gcd (int a, int b) {",  
			"    return b ? gcd (b, a % b) : a;",  
			"}"
		]
	},
	

	"chinese": {
		"prefix": "chinese",
		"body": [
			"struct Congruence {",  
			"    long long a, m;",  
			"};",  

			"long long chinese_remainder_theorem(vector<Congruence> const& congruences) {",  
			"    long long M = 1;",  
			"    for (auto const& congruence : congruences) {",  
			"        M *= congruence.m;",  
			"    }",  

			"    long long solution = 0;",  
			"    for (auto const& congruence : congruences) {",  
			"        long long a_i = congruence.a;",  
			"        long long M_i = M / congruence.m;",  
			"        long long N_i = mod_inv(M_i, congruence.m);",  
			"        solution = (solution + a_i * M_i % M * N_i) % M;",  
			"    }",  
			"    return solution;",  
			"}"

		]
	},

	"bfs": {
		"prefix": "bfs",
		"body": [
			"vector<int> vis(n);",
			"queue<int> q;",
			"q.push(0);",
			"while(!q.empty()){",
			"   int u = q.front(); q.pop();",
			"   vis[u] = true;",
			"   for(int v : adj[u]){",
			"      if(!vis[v])",
			"      q.push(v);",
			"   }",
			"}",
		]
	},

	"djikstra": {
		"prefix": "djikstra",
		"body": [
			"vector<int> dis(n, INT_MAX);",
			"priority_queue<pii, vector<pii>, greater<pii>> pq;",
			"",
			"pq.push({0, 0});",
			"dis[0] = 0;",
			"",
			"while(!pq.empty()){",
			"   auto [d, u] = pq.top(); pq.pop();",
			"   for(auto [v, w] : adj[u]){",
			"       if(dis[u] + w < dis[v]){",
			"           dis[v] = dis[u] + w;",
			"           pq.push({dis[v], v});",
			"       }",
			"   }",
			"}"
		]
	},


	
}
